using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

public class GetAutoGeneratePrefabs
{
    [MenuItem("Assets/RefreshPrefabs")]
    public static void RefeshPrefab()
    {
        if (!File.Exists("Assets/My/Editor/CreatePrefab.cs"))
        {
            Debug.LogError("File Dose not exist");
            return;
        }

        string scriptCode = $@"
using UnityEngine;
using UnityEditor;

public class CreatePrefab
{{
    public static void CreatePrefabs(string fileName)
    {{
        string prefabPath = $""Assets/My/Prefabs/{{fileName}}.prefab"";

        GameObject prefab = AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath);

        if (prefab != null)
        {{
            var instance = PrefabUtility.InstantiatePrefab(prefab) as GameObject;

            if(Selection.activeTransform != null)
            {{
                instance.transform.SetParent(Selection.activeTransform, false);
            }}

            EditorGUIUtility.PingObject(instance);

            Undo.RegisterCreatedObjectUndo(instance, ""Create"" + instance.name);
        }}
        else
        {{
            Debug.LogError(""No Prefab : "" + prefabPath);
        }}
    }}

    //Create
{GetAutoGeneratedCode()}
}}";

        File.WriteAllText("Assets/My/Editor/CreatePrefab.cs", scriptCode.Trim());
        AssetDatabase.Refresh();
    }

    public static string GetAutoGeneratedCode()
    {
        StringBuilder sb = new StringBuilder();
        string path = Application.dataPath + "/My/Prefabs";
        string extBack = ".prefab";
        string extFront = "*";
        string extName = extFront + extBack;
        DirectoryInfo dir = new DirectoryInfo(path);

        foreach (var v in dir.GetDirectories())
        {
            FileInfo[] info = v.GetFiles(extName, SearchOption.AllDirectories);

            sb.AppendLine($@"   #region {v.Name}_Create");
            for (int i = 0; i < info.Length; i++)
            {
                string fileName = Path.GetFileNameWithoutExtension(info[i].Name);
                string removeMenuName = fileName + extBack;
                string menuName = info[i].FullName.Replace("\\","/").Replace(path, "").Replace(removeMenuName,"");

                sb.AppendLine($@"   [MenuItem(""GameObject/Prefabs{menuName}{fileName}"",false, 1)]");
                sb.AppendLine($@"   public static void Create{fileName.Replace(" ", "_")}() => CreatePrefabs(""{fileName}"");");
            }
            sb.AppendLine($@"   #endregion");
            sb.AppendLine();
        }

        return sb.ToString();
    }
}
